#version 140
 
precision highp float;
 
in  vec4 ex_Color;
in  vec3 ex_UV[NUM_SAMPLERS]; 
in  vec3 ex_Normal;
in  vec3 ex_EyeDirection;

out vec4 out_Color;

uniform sampler2D colorMap[NUM_SAMPLERS];
uniform vec3 lightDirection;
uniform float alpha;
 
void main(void)
{
	// Phong shading
	float lightAmount = dot(normalize(ex_Normal), lightDirection);

	// simple bounce
	lightAmount = lightAmount < 0.0f ? lightAmount * -0.2 : lightAmount;

	// spec
	float spec = pow(max(dot(ex_EyeDirection, reflect(ex_Normal, lightDirection)), 0.0), 16.0) * 0.3;
	
	vec4 color = vec4(texture(colorMap[0], ex_UV[0].xy).xyz, ex_UV[0].z);
	float curWeight = max(color.a - 0.1, 0.0) * ex_UV[0].z;
	vec4 weightedColor = vec4(color.rgb * curWeight, curWeight);
	for (int i = 1; i < NUM_SAMPLERS; i++) {
		vec4 curColor = vec4(texture(colorMap[i], ex_UV[i].xy).xyz, ex_UV[i].z);
		color = mix(color, curColor, step(color.w, curColor.w));
		curWeight = max(curColor.a - 0.1, 0.0) * ex_UV[i].z;
		weightedColor.rgb += curColor.rgb * curWeight;
		weightedColor.a += curWeight;
	}

	if (weightedColor.a != 0.0) {
		color.rgb = weightedColor.rgb / weightedColor.a;
	}

	lightAmount = 1.0;
	spec = 0.0;

	out_Color = vec4(
		(lightAmount * 0.4 + 0.6) * color.xyz + spec,
		alpha
	);
}